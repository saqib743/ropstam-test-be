import userModel from "../models/users.model";
import mongoose from "mongoose";
import bcrypt from "bcryptjs";
import jwt from "jsonwebtoken";
import { Users } from "../interfaces/users";
import { getSecretKey } from "../helpers/environmentVariables";
import { emailService } from "../services/emailservice";
function generateRandomPassword(length: number) {
  const charset =
    "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
  let password = "";
  for (let i = 0; i < length; i++) {
    const randomIndex = Math.floor(Math.random() * charset.length);
    password += charset.charAt(randomIndex);
  }
  return password;
}

const createUserRepository = async (data: Users) => {
  try {
    let user = await userModel.findOne({ email: data.email.toLowerCase() });

    if (!user) {
      const autoGeneratedPassword = generateRandomPassword(20);
      await emailService({
        email: data.email,
        password: autoGeneratedPassword,
      });
      const pass = bcrypt.hashSync(autoGeneratedPassword, 10);
      const _id = new mongoose.Types.ObjectId();
      const newUser = new userModel({
        _id,
        ...data,
        password: pass,
      });

      const addedUser = await newUser.save();

      return addedUser;
    } else {
      throw new Error(
        '{"status":"Already Exists", "statusCode":403, "errorMessage":"User Has Already Been Registered"}'
      );
    }
  } catch (err: any) {
    try {
      err = JSON.parse(err.message);
    } catch (err) {
      throw new Error(
        '{"status":"Failed", "statusCode":500, "errorMessage":"Error occurred while Registering a User."}'
      );
    }
    throw new Error(
      `{"status":"${err.status}", "statusCode":${err.statusCode}, "errorMessage":"${err.errorMessage}"}`
    );
  }
};

const userLogInRepository = async (data: {
  email: string;
  password: string;
}) => {
  try {
    let userDoc = await userModel.findOne({ email: data.email });

    if (userDoc && userDoc.password) {
      if (bcrypt.compareSync(data.password, userDoc.password)) {
        const user = {
          email: userDoc.email,
        };
        const token = jwt.sign(
          {
            email: userDoc.email,
          },
          getSecretKey(),
          {
            expiresIn: "2h",
          }
        );

        return { user, token };
      }
      throw new Error(
        '{"status":"Auth Failed", "statusCode":401, "errorMessage":"No User Found with given Email and Password."}'
      );
    } else {
      throw new Error(
        '{"status":"User Not Found", "statusCode":404, "errorMessage":"No User found with the given credentials."}'
      );
    }
  } catch (err: any) {
    console.log(err);
    try {
      err = JSON.parse(err.message);
    } catch (err) {
      throw new Error(
        '{"status":"Failed", "statusCode":500, "errorMessage":"Error occurred while Login."}'
      );
    }
    throw new Error(
      `{"status":"${err.status}", "statusCode":${err.statusCode}, "errorMessage":"${err.errorMessage}"}`
    );
  }
};

export { createUserRepository, userLogInRepository };
